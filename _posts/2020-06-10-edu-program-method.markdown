---
layout: post
title:  Методы и подход разработки обучающей программы по специальность вычислительные системы и сети
date:   2020-06-10 12:00:00 +0300
categories: hmmm
tags: edu
---

Цель: сформировать учебную программу в области вычислительной техники, адресованной следующим возможностям:
- удовлетворить спрос на новых специалистов на рынке труда для конкретных компаний (в идеале сразу поставить человека за «станок»);
- сделать человека востребованным на рынке труда в длительной перспективе и с высоким уровнем мобильности (человек приспособлен к тому, чтобы менять свою роль/должность, используемые технологии и предметную область, интересует большое количество работодателей);
- развлечь/занять студента в течение обучения, помочь обзавестись знакомствами;
- развлечь преподавателя и предоставить ему возможности для саморазвития и развития собственных идей/проектов;
- предоставить академии и индустрии новых предпринимателей, учёных и преподавателей;
и при этом позволяющей динамически разрешать имеющиеся противоречия (по ситуации).

Учебная программа (методика) — совокупность шаблонов, учебных приёмов и рекомендаций, позволяющих сформировать и адаптировать учебный план (индивидуальный).

Учебный план (метод) — совокупность учебных мероприятий, которая, будучи применённой к отвечающему заданным требованиям студенту, позволит по прошествии заданного времени получить интересующего специалиста. Agile, так как в процессе обучения могут меняться требования, узнаваться/уточняться начальные условия, но при этом должен реализовываться в водопадном стиле с заранее заданными коридорами возможностей. Выход за пределы учебной программы приемлем (смена направления или отчисление студента).

Учебная программа включает в себя:
- описание ожидаемого результата (будущего специалиста) с известными степенями свободы;
- конструктор учебных планов, которые определяют что, когда и как делать, позволяет корректировать учебный план и идентифицировать такую необходимость (непосредственные участники процесса могут увлечься и упустить момент).

Примечания:
- нет эталонного специалиста, он всегда продукт компромисса;
- есть обратная связь, так как выпускники рано или поздно определяют рынок (хотя влияние и мало);
- область невероятно разнообразна и изменчива, отсутствуют какие-либо индустриальные стандарты, нет устоявшихся методов, подходов, критериев оценки, всё всегда по месту (в подавляющем большинстве случаев это означает, что выпускнику придётся учиться технологическому стеку и хорошим привычкам уже на месте работы);
- информатика и вычислительная техника - инструментальные дисциплины, а значит знания прикладных областей будут лежать за пределами учебной программы (в подавляющем большинстве случаев это означает, что выпускнику придётся учиться прикладной специфике уже на месте работы);
- инструменты радуют и удивляют только тех, кто в них разбирается, в то время как в других областях есть прыгающие роботы, красивые визуализации больших данных и т.п., а у нас это текст "AAAAAABBBBBAAAA" демонстрирующий смену процессов.

Для создания учебной программы необходимы:
- инструмент для определения и управления ТЗ (характеристиками нашего будущего выпускника);
- инструмент для формирования, управления и документирования методологий (учебных планов).

* Инструмент для определения и управления целью учебного процесса
Начнём с первой задачи, что мы хотим получить в результате учебного процесса? В соответствии с системным подходом, system-of-interest определяется с точки зрения её функционального места и операционного окружения. В соответствии с обозначенными возможностями это будущее место работы человека в некоторой организационной структуре, где он должен решать широкий круг технических, организационных и социальных задач, причём большая из них не может быть артикулирована (см. практическая информация и неравномерность распределения информации в австрийской экономической школе).

Сегодня, роль человека задаёт методология разработки (возможно, тут есть подмена понятий), вне зависимости от того была она описана или нет (см. отношение архитектуры и архитектурного описания по ISO 42010 [^1]). При этом любая методология в той или иной степени направлена на специализацию труда и формирование шаблонов деятельности/процессов (рост эффективности, снижение рисков и издержек, механизация работы, взаимозаменяемость кадров).

Определить роль человека — значит определить методологию разработки проекта, а также место и задачи человека в рамках этой структуры.

Сегодня существует огромное количество подходов к разработке компьютерных систем, отличия между которыми лежат в технической, бизнес и социальных плоскостях. Многие методологии прямо противоречат друг-другу, имеют разные области применения, соответствуют разным типам коллективов.

Одним из актуальных стандартов в области работы с методологиями разработки компьютерных систем (software intensive system) является стандарт Essence, разработанный для их описания, разработки и сравнения [^2].

Предлагаемый стандартом язык [^3] для описания методологий включает в себя следующие элементы:
- *Альфы* -- аспекты, точки зрения на систему, сильно взаимосвязаны между собой, но при этом рассматривают разные вопросы (требуют разных компетенций). Определены 7 альф: opportunity, stakeholder, requirement, software system, work, team, way of work.
- *Состояния альф* -- оценка уровня готовности/завершённости аспекта системы (к примеру, для stakeholder это Recognized, Represented, Involved, In Agreement, Satisfies for Deploy, Satisfied in Use).
- *Место для активности* и *активности* -- непосредственные работы над системой.
- Компетенции -- то, что позволяет реализовать требуемые активности (инструментальные средства являются продолжением компетенций, а не самостоятельным элементом).

#+attr_html: :width 800px
http://sewiki.ru/images/thumb/e/e4/OMG-Essence-language.svg/1280px-OMG-Essence-language.svg.png

При этом, стандарт постулирует что метод разработки системы всегда ситуативен (разрабатывается под конкретный проект и изменяется в моменте). Со стороны языка эта идеология поддержана наличием шаблонов, которые позволяют определить методику ситуативной инженерии методов, а именно:
- шаблоны синхронизации прогресса по альфам (водопад -- сперва требования, потом код; XP -- сперва код, а на требования вообще забьём);
- шаблоны составных активностей и выбора активностей;
- шаблоны организационных структур, ролей в команде.

Таким образом, стандарт позволяет нам задокументировать семейство методик разработки компьютерных систем, выделить из них типовые шаблоны активностей (элементы лабораторных и практических заданий) и ролей (паспорта специальностей).

Ценность такого подхода заключается в том, что есть возможность продемонстрировать это всё учащимся, что должно в значительной степени облегчить рационализацию происходящего и оценку качества учебного плана. Предоставить общее видение того, что такое разработка компьютерной системы и из чего она состоит.

Но у него есть и большая проблема/противоречие: специализация/универсальность и прикладник/специалист по ВТ. К примеру, зачем бизнес программисту лямбда исчисление, архитектура процессоров, OSI модель, верилоги и математика, если не для удовлетворения честолюбия?

Отсюда можно поставить следующие задачи:
- сформировать список типовых проектов, к которым мы готовим наших студентов (и сразу вопрос кому такие специалисты нужны и в какой стране?);
- определить типовые методики проектирования выбранных типовых проектов (а значит шаблоны активностей и организационных структур);
- определить типовые роли, а значит типовые цели учебных планов.

* Инструмент для формирования, управления и документирования учебных планов
Если решены описанные выше задачи, то мы можем применить тот-же язык для описания учебной программы (методика ситуативной инженерии методов) и учебного плана (метод).

*Объектом*, рассматриваемым в рамках методики является учащийся. *Альфой* -- компетенция/дисциплина в широком смысле/вопрос/какое-то близкое понятие. *Состояние альфы* -- уровень владения вопросом, к примеру альфа организации процессора: архитектура фон Неймана -> предоставляемые программисту механизмы -> оптимизации (память, конвейер...) -> микропрограммирование -> проектирование pipeline...

*Активность* -- набор учебных мероприятий, направленных на освоение вопроса. К примеру: курс, лекция, лабораторная работа, курсовой проект.

*Компетенция* -- в данном случае относится к преподавательскому составу, а не к учащемуся.

Автоматически такая модель учебного плана будет включать в себя шаблоны синхронизации прогресса по альфам (нет смысла учить разработке компиляторов того, кто программировать не умеет), а также шаблоны активностей и выбора активностей (к примеру, устройство процессора можно рассказывать с позиции аппаратчика и с позиции программиста[^4]).

Визуально это будет выглядеть примерно следующим образом (на схеме представление водопадной модели разработки):

[[https://www.researchgate.net/profile/Barry_Myburgh2/publication/292881547/figure/fig3/AS:331797868105737@1456118184430/SEMAT-Lifecycle-Template.png]]

Где у разработчика учебного плана (методики) есть возможность:
- в заданных пределах сортировать относительно друг друга уровни владения вопросов (стадии альф), и тем самым формируя последовательность курсов/мероприятий;
- определить нижнюю границу (состояние каждой альфы, на котором студен в должной мере овладел вопросом), по достижению которой студент станет искомым специалистом.

Причём такой подход позволяет динамически адаптировать учебный план, делать его индивидуальным. Главное что бы достигнутый профиль получился осмысленным.

[^1]: ISO/IEC/IEEE 42010 Systems and software engineering -- Architecture  description. 2011.

[^2]: Ivar Jacobson, Discover the Essence of Software Engineering. CSI Communications, July 2011, http://semat.org/documents/20181/27952/Technical_Trends_3.pdf/f12257fc-81e9-4a25-8fef-c2076ebce105

[^3]: Essence -- Kernel and Language for Software Engineering Methods. Foundation for the Agile Creation and Enactment of Software Engineering Methods (FACESEM) RFP, 2012.

[^4]: Возможно, имеет смысл отказать от жёсткой привязки курсов к тому или иному семестру.
